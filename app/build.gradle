plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id "com.google.devtools.ksp"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
}

// Version
def versionMajor = 1
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0

android {
    namespace 'com.flixclusive'
    compileSdk 34

    defaultConfig {
        applicationId "com.flixclusive"
        minSdk 21
        targetSdk 34
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.configureEach { variant ->
        variant.addJavaSourceFoldersToModel(
            new File(buildDir, "generated/ksp/${variant.name}/kotlin")
        )
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_18
        targetCompatibility JavaVersion.VERSION_18
    }

    kotlinOptions {
        jvmTarget = '18'
        freeCompilerArgs += "-opt-in=androidx.tv.material3.ExperimentalTvMaterial3Api"
        freeCompilerArgs += "-opt-in=androidx.tv.foundation.ExperimentalTvFoundationApi"
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

ksp {
    arg(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
}

dependencies {
    def tvCompose = '1.0.0-alpha09'
    def composeUi = "1.6.0-alpha01"
    def googleMaterial = "1.9.0"
    def material3 = "1.1.1"
    def media3 = "1.1.1"
    def splashScreen = "1.0.1"
    def hilt = "2.48"
    def hiltNavigation = "1.0.0"
    def retrofit2 = "2.9.0"
    def composeDestination = "1.9.42-beta"
    def lifecycleRuntime = "2.6.2"
    def room = "2.5.2"
    def dataStore = "1.0.0"
    def coreKtx = "1.12.0"
    def serialization = "1.5.1"
    def activityCompose = "1.7.2"
    def constraintLayout = "1.0.1"
    def gson = "2.10.1"
    def coil = "2.4.0"
    def jUnit = "5.10.0"
    def mockitoVersion = "5.4.0"

    implementation project(path: ':flixclusive_provider')

    // Datastore
    implementation "androidx.datastore:datastore-preferences:$dataStore"

    // Core KTX
    implementation "androidx.core:core-ktx:$coreKtx"

    // Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleRuntime"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycleRuntime"

    implementation "androidx.activity:activity-compose:$activityCompose"
    implementation "androidx.compose.ui:ui:$composeUi"
    implementation "androidx.compose.ui:ui-graphics:$composeUi"
    implementation "androidx.compose.animation:animation-graphics:$composeUi"
    implementation "androidx.compose.ui:ui-tooling-preview:$composeUi"
    implementation "androidx.compose.foundation:foundation:$composeUi"
    implementation "com.google.android.material:material:$googleMaterial"

    // Compose for Mobile
    implementation "androidx.compose.material3:material3:$material3"

    // Compose for TV dependencies
    implementation "androidx.tv:tv-foundation:$tvCompose"
    implementation "androidx.tv:tv-material:$tvCompose"

    // Exoplayer
    implementation "androidx.media3:media3-session:$media3"
    implementation "androidx.media3:media3-exoplayer:$media3"
    implementation "androidx.media3:media3-exoplayer-hls:$media3"
    implementation "androidx.media3:media3-ui:$media3"
    implementation "androidx.media3:media3-ui-leanback:$media3"
    implementation "androidx.media3:media3-cast:$media3"
    implementation "androidx.media3:media3-common:$media3"

    // ConstraintLayout
    implementation "androidx.constraintlayout:constraintlayout-compose:$constraintLayout"

    // Room
    implementation "androidx.room:room-runtime:$room"
    ksp "androidx.room:room-compiler:$room"
    implementation "androidx.room:room-ktx:$room"

    // Retrofit2
    implementation "com.squareup.retrofit2:retrofit:$retrofit2"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit2"

    // Gson
    implementation "com.google.code.gson:gson:$gson"

    // Coil
    implementation "io.coil-kt:coil-compose:$coil"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt"
    ksp "com.google.dagger:hilt-android-compiler:$hilt"
    implementation "androidx.hilt:hilt-navigation-compose:$hiltNavigation"

    // Compose Destinations by raamcosta
    implementation "io.github.raamcosta.compose-destinations:animations-core:$composeDestination"
    ksp "io.github.raamcosta.compose-destinations:ksp:$composeDestination"

    // SplashScreen
    implementation("androidx.core:core-splashscreen:$splashScreen")

    testImplementation("org.junit.jupiter:junit-jupiter:$jUnit")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation project(path: ':flixclusive_provider')
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
    }

    @Override
    Iterable<String> asArguments() {
        return ["room.schemaLocation=${schemaDir.path}".toString()]
    }
}